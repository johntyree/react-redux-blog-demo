{"version":3,"sources":["apis/jsonPlaceholder.js","actions/fetchPosts.js","actions/fetchUser.js","components/UserHeader.js","components/PostList.js","components/App.js","reducers/usersReducer.js","reducers/index.js","reducers/postsReducer.js","index.js"],"names":["axios","create","baseURL","_active_request","_active_requests","fetchUser","id","dispatch","a","jsonPlaceholder","get","response","type","payload","data","UserHeader","this","props","userId","user","className","name","React","Component","connect","state","ownProps","users","PostList","fetchPosts","forEach","v","i","j","Math","round","random","v2","shuffle","posts","map","post","key","title","body","renderList","App","combineReducers","action","userInfo","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","document","querySelector"],"mappings":"kUAEeA,E,OAAAA,EAAMC,OAAO,CAC1BC,QAAS,yCCCPC,GAAkB,ECAhBC,EAAmB,GAEZC,EAAY,SAAAC,GAAE,8CAAI,WAAMC,GAAN,eAAAC,EAAA,0DACvBJ,EAAiBE,GADM,wDAI3BF,EAAiBE,IAAM,EAJI,SAKJG,EAAgBC,IAAhB,iBAA8BJ,IAL1B,OAKrBK,EALqB,OAM3BJ,EAAS,CAAEK,KAVW,aAUOC,QAASF,EAASG,cACxCV,EAAiBE,GAPG,2CAAJ,uDCDrBS,E,4LAGFC,KAAKC,MAAMZ,UAAUW,KAAKC,MAAMC,U,+BAGvB,IACDC,EAASH,KAAKC,MAAdE,KACR,OAAKA,EAKE,yBAAKC,UAAU,aAAY,4BAAKD,EAAKE,OAHpC,yBAAKD,UAAU,8C,GAVFE,IAAMC,WAsBhBC,eAJS,SAACC,EAAOC,GAC9B,MAAO,CAAEP,KAAMM,EAAME,MAAMD,EAASR,WAKpC,CAAEb,aAFWmB,CAGbT,GCxBIa,E,4LAGFZ,KAAKC,MAAMY,e,8BAGLrB,GASN,OAPS,YAAOA,GACZsB,SAAQ,SAACC,EAAGC,GACd,IAAMC,EAAIC,KAAKC,MAAMD,KAAKE,SAAWJ,GAC/BK,EAAK7B,EAAEyB,GACbzB,EAAEyB,GAAKzB,EAAEwB,GACTxB,EAAEwB,GAAKK,KAEF7B,I,mCAIP,OAAOQ,KAAKsB,QAAQtB,KAAKC,MAAMsB,OAAOC,KAAI,SAAAC,GACxC,OACE,yBAAKC,IAAKD,EAAKnC,GAAIc,UAAU,QAC3B,uBAAGA,UAAU,mCACb,yBAAKA,UAAU,uBACX,4BAAKqB,EAAKE,OACV,2BAAIF,EAAKG,MACT,kBAAC,EAAD,CAAY1B,OAAQuB,EAAKvB,gB,+BAQnC,OAAO,yBAAKE,UAAU,2BAA2BJ,KAAK6B,kB,GAlCnCvB,IAAMC,WA2CdC,eAJS,SAAAC,GACtB,MAAO,CAAEc,MAAOd,EAAMc,MAAOZ,MAAOF,EAAME,SAKzC,CAAEE,WH7CqB,yDAAM,WAAMtB,GAAN,eAAAC,EAAA,0DACxBL,EADwB,wDAI5BA,GAAkB,EAJU,SAKLM,EAAgBC,IAAI,UALf,OAKtBC,EALsB,OAM5BJ,EAAS,CAAEK,KAVY,cAUOC,QAASF,EAASG,OAChDX,GAAkB,EAPU,2CAAN,uDG6CTE,aAFFmB,CAGbI,GCzCakB,EARH,WACV,OACE,yBAAK1B,UAAU,gBACb,kBAAC,EAAD,Q,ilBCJS,ICEA2B,cAAgB,CAC7BR,MCHa,WAAyB,IAAxBd,EAAuB,uDAAf,GAAIuB,EAAW,uCACrC,MPDyB,gBOClBA,EAAOpC,KAAuBoC,EAAOnC,QAAUY,GDGtDE,MDJa,WAAyB,IAAxBF,EAAuB,uDAAf,GAAIuB,EAAW,uCACrC,GJDwB,eICpBA,EAAOpC,KAAqB,CAC9B,IAAMM,EAAS8B,EAAOnC,QAAQP,GACxB2C,EAAWD,EAAOnC,QACxB,OAAO,EAAP,GAAWY,EAAX,eAAmBP,EAAS+B,IAE9B,OAAOxB,KGEHyB,EAAQC,YAAYC,EAAUC,YAAgBC,MAEpDC,IAASC,OACP,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,OAEFO,SAASC,cAAc,Y","file":"static/js/main.1908a1df.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default axios.create({\n  baseURL: 'https://jsonplaceholder.typicode.com'\n});\n","import jsonPlaceholder from '../apis/jsonPlaceholder';\n\nexport const FETCH_POSTS = 'FETCH_POSTS';\n\nvar _active_request = false;\n\nexport const fetchPosts = () => async dispatch => {\n    if (_active_request) {\n      return;\n    }\n    _active_request = true;\n    const response = await jsonPlaceholder.get('/posts');\n    dispatch({ type: FETCH_POSTS, payload: response.data });\n    _active_request = false;\n};\n","import jsonPlaceholder from '../apis/jsonPlaceholder';\n\nexport const FETCH_USER = 'FETCH_USER';\n\nconst _active_requests = {};\n\nexport const fetchUser = id => async dispatch => {\n    if (_active_requests[id]) {\n      return\n    }\n    _active_requests[id] = true;\n    const response = await jsonPlaceholder.get(`/users/${id}`);\n    dispatch({ type: FETCH_USER, payload: response.data });\n    delete _active_requests[id];\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchUser } from '../actions';\n\n\nclass UserHeader extends React.Component {\n\n  componentDidMount() {\n    this.props.fetchUser(this.props.userId);\n  }\n\n  render () {\n    const { user } = this.props;\n    if (!user) {\n      return (\n            <div className=\"ui active inline tiny centered loader\"></div>\n      );\n    }\n    return <div className=\"ui header\"><h2>{user.name}</h2></div>;\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => { \n  return { user: state.users[ownProps.userId] }\n}\n\nexport default connect(\n  mapStateToProps,\n  { fetchUser }\n)(UserHeader);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchPosts, fetchUser } from '../actions';\nimport UserHeader from './UserHeader';\n\n\nclass PostList extends React.Component {\n\n  componentDidMount() {\n    this.props.fetchPosts();\n  }\n\n  shuffle(a) {\n    // fisher yates\n    const out = [...a];\n    out.forEach((v, i) => {\n      const j = Math.round(Math.random() * i);\n      const v2 = a[j];\n      a[j] = a[i];\n      a[i] = v2;\n    });\n    return a;\n  }\n\n  renderList() {\n    return this.shuffle(this.props.posts).map(post => {\n      return (\n        <div key={post.id} className=\"item\" >\n          <i className=\"large middle aligned icon user\" />\n          <div className=\"content description\">\n              <h2>{post.title}</h2>\n              <p>{post.body}</p>\n              <UserHeader userId={post.userId} />\n          </div>\n        </div>\n      );\n    });\n  }\n\n  render() {\n    return <div className=\"ui relaxed divided list\">{this.renderList()}</div>;\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return { posts: state.posts, users: state.users };\n};\n\nexport default connect(\n    mapStateToProps,\n   { fetchPosts, fetchUser }\n)(PostList);\n","import React from 'react';\nimport PostList from './PostList';\n\nconst App = () => {\n  return (\n    <div className=\"ui container\">\n      <PostList />\n    </div>\n  );\n}\n\nexport default App;\n","import { FETCH_USER } from '../actions';\n\nexport default (state = {}, action) => {\n  if (action.type === FETCH_USER) {\n    const userId = action.payload.id;\n    const userInfo = action.payload;\n    return {...state, [userId]: userInfo };\n  }\n  return state\n}\n","import { combineReducers } from 'redux';\nimport postsReducer from './postsReducer';\nimport usersReducer from './usersReducer';\n\nexport default combineReducers({\n  posts: postsReducer,\n  users: usersReducer,\n});\n","import { FETCH_POSTS } from '../actions';\n\nexport default (state = [], action) => {\n  return action.type === FETCH_POSTS ? action.payload : state;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport App from './components/App';\nimport reducers from './reducers';\n\n\nconst store = createStore(reducers, applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.querySelector('#root')\n);\n"],"sourceRoot":""}